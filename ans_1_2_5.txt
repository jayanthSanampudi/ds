Easy: Understanding Bubble Sort Manually sort the array ` [1,6,4,2] ` using the bubble sort technique.
 write down each step of the process.
a)
  given array is [ 1, 6 , 4 , 2 ]
  lets apply Bubble sort algorithm 
  now the index of given array is starts from 0 to 3 because the size of array is 4 .
  step1 : 
      > Compare 1 and 6,here "6" is greater than "0" no swap: [1, 6, 4, 2]
      > Compare 6 and 4, swap because 6 > 4: [1, 4, 6, 2]
      > Compare 6 and 2, swap because 6 > 2: [1, 4, 2, 6]
  after one loop now the array is [0,4,2,6]
  step2 :
      > Compare 0 and 4,here "4" is greater than "1" no swap: [0, 4, 2, 6]
      > Compare 4 and 2, swap because 4 > 2: [0, 2, 4, 6]
  step3 :
      > Compare 0 and 2, no swap: [0, 2, 4, 6]
      > Compare 2 and 4, no swap: [0, 2, 4, 6]
      > Compare 4 and 6, no swap: [0, 2, 4, 6]
 therefore , After applying Bubble Sort algorithm the array is in ascending order .

2. Intermediate: Trace the Bubble Sort Provided the unsorted array ` [50,45,32,21,1] ` and trace the bubble sort algorithm step by step, 
  showing the changes in the array after each pass.
A)
  given array is [ 50, 45, 32, 21, 1]
  lets apply Bubble sort algorithm 
  now the index of given array is starts from 0 to 4 because the size of array is 5 .
  step1 : 
      > Compare 50 and 45, swap because 50 is greater than 45: [45, 50, 32, 21, 1]
      > Compare 50 and 32, swap because 50 > 32: [45, 32, 50, 21, 1]
      > Compare 50 and 21, swap because 50 is greater than 21: [45, 32, 21, 50, 1]
      > Compare 50 and 1, swap because 50 > 1: [45, 32, 21, 1, 50]
   after first loop now the given array is [45, 32, 21, 1, 50].

  step2 :
     > Compare 45 and 32, swap because 45 > 32: [30, 40, 20, 10, 50]
     > Compare 45 and 21, swap because 45 is greater than 21: [32, 21, 45, 1, 50]
     > Compare 45 and 1, swap because 45 > 1: [32, 21, 1, 45, 50]
   after second loop now the given array is [32, 21, 1, 45, 50].

  step3 :
      > Compare 32 and 21, swap because 32 is greater than 21: [21, 32, 1, 45, 50]
      > Compare 32 and 1, swap because 32 > 1: [21, 1, 32, 45, 50]
  after third loop now the given array is [21, 1, 32, 45, 50].

  step4 :
      > Compare 21 and 1, swap because 21 is greater than 1: [1, 21, 32, 45, 50]
  .'. After applying Bubble Sort algorithm the array is in ascending order .


5. Advanced: Comparison with Other Sorting Algorithms Compare the bubble sort algorithm with quicksort and merge sort. 
  Discuss the advantages and disadvantages of bubble sort in different scenarios.
  Additionally, analyze when it might be preferable to use other sorting algorithms.
A).
  Bubble sort, quicksort, and merge sort are all sorting algorithms but different in the time complexity .
  Bubble Sort:
   >Simple to understand and implement.
   >it is use for small date sets .
  Quick sort :
   >Quicksort has an average-case time complexity of O(n log n), making it much more efficient than bubble sort for large datasets.
   >it has worst time complexity and not suitable for big data set.
  Merge sort:
   >Merge sort is well-suited for sorting linked lists since it doesn't require random access to elements.
   >it has high space complexity while compare to other sorting algorithm .